[general]
# Output folder path.
out_folder = examples
# Seed for random number generator.
seed = 10
# Floating point precision; float32 OR float64 (float64 is recommended).
precision = float64
# Fraction of dataset to hold out for testing.
hold_out = 0.2

[data]
# File containing covariates in the same order as the sequences.
covariate_file = examples/data1_covariate.csv
# File format; csv OR pickle.
covariate_filetype = csv
# Header in csv file (if applicable); None OR infer (uses pandas' automated header detection).
covariate_header = None
# File containing sequences.
sequence_file = examples/data1.fasta
# File format for sequences; fasta recommended. Uses SeqIO from Biopython.
sequence_filetype = fasta
# prot (protein) OR nt (DNA nucleotides)
alphabet = nt

[hyperp]
# Scale parameter for Normal prior on latent weight matrix.
bt_scale = 1.0
# Scale parameter for Normal prior on latent offset vector.
b0_scale = 1.0
# Mean parameter for Normal prior on deletion parameter.
u_conc = [100,1]
# Mean parameter for Normal prior on insertion parameter.
r_conc = [100,1]
# Mean parameter for Normal prior on substitution parameter.
l_conc = 0.0
# Length of latent ancestral sequence. 2 OR 3 OR ... OR auto (1.1 x max sequence length in dataset).
latent_length = 10
# Size (D) of latent alphabet. Usually more than the observed alphabet size.
latent_alphabet_size = 6
# Maximum deletion size; smaller allowed sizes produce faster training.
max_delete = 3

[train]
# Number of epochs of training.
max_epochs = 50
# Minibatch size.
batch_size = 10
# Keras optimizer. Adam recommended.
optimizer_name = Adam
# Learning rate.
learning_rate = 0.1
# Monte carlo samples used during heldout evaluation to estimate expectations.
mc_samples = 10

[results]
